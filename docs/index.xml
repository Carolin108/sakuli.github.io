<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sakuli Docs on Sakuli E2E and Monitoring</title>
    <link>/docs/</link>
    <description>Recent content in Sakuli Docs on Sakuli E2E and Monitoring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started</title>
      <link>/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/</guid>
      <description>Prerequisites Sakuli is built and tested against the current LTS version of Node.js. So in order to run Sakuli on your system, we will assume that you have a node v10.15.3 (lts/dubnium) installed on your system.
To install Node.js on your system, you can either go the node website, or you could use node version manager, a utility to manage various node versions.
Initialisation This guide will get you started with writing Sakuli tests from scratch.</description>
    </item>
    
    <item>
      <title>Legacy API</title>
      <link>/docs/legacy-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/legacy-api/</guid>
      <description>Sakulis runs its Tests in an isolated node.js vm script runner and injects its own global scope. The legacy preset adds the most common Classes and functions which where available in Sakuli V1.x.
Common Classes and Utils TestCase The TestCase class - obviously - represents a testcase. It&amp;rsquo;s API doesn&amp;rsquo;t differ much from the former version.
Web Testing For the webtesting most of the functions from sahi tests could be used (please note that Sakuli only implements the Open Soure APIs).</description>
    </item>
    
  </channel>
</rss>