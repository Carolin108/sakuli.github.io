<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sakuli E2E and Monitoring</title>
    <link>/</link>
    <description>Recent content on Sakuli E2E and Monitoring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started</title>
      <link>/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/</guid>
      <description>Prerequisites Sakuli is built and tested against the current LTS version of Node.js. So in order to run Sakuli on your system, we will assume that you have a node v10.15.3 (lts/dubnium) installed on your system.
To install Node.js on your system, you can either go the node website, or you could use node version manager, a utility to manage various node versions.
Initialisation This guide will get you started with writing Sakuli tests from scratch.</description>
    </item>
    
    <item>
      <title>Legacy API</title>
      <link>/docs/legacy-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/legacy-api/</guid>
      <description> Common Classes and Utils Web Testing Native Testign </description>
    </item>
    
    <item>
      <title>Legal Notice</title>
      <link>/legalnotice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legalnotice/</guid>
      <description>Address ConSol Consulting &amp;amp; Solutions Software GmbH
St.-Cajetan-Straße 43
D-81669 Munich
Telefon: +49-89-45841-100
Telefax: +49-89-45841-111
E-Mail: info@consol.de
Commercial register Registration court: Munich District Court
HRB 97371
Sales tax identification number (in accordance with § 27 a of the Sales Tax Law) DE 129318612
Authorized company officers Dr. Ulrich Schwanengel
Michael Beutner – Technology
Andrea Stellwag – Finances
Bernd Wiserner – Resources
Responsible for content (in accordance with § 6 MDStV) Nico Zellner</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/monitoring/</guid>
      <description>Aside from the correct behavior of your system, you may also be interested in the actual performance of user interactions with the system.
First to Know, First to Act Identifying possible performance bottlenecks - before your users will - is a critical task for operators and administrators. Sakuli makes it possible to integrate such real-world performance analysis in an automated way. To achieve this, Sakuli provides a generic forwarder interface which receives the latest results of a test run.</description>
    </item>
    
    <item>
      <title>Monitoring Forwarder</title>
      <link>/enterprise/forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/forwarder/</guid>
      <description>End-2-End Application Testing and Monitoring: Your Perfect Combination Combining end-2-end testing with monitoring solutions proves to be optimal – because effective quality assurance looks over and beyond any given server: Automated end-2-end tests ensure that your web or rich client ecosystem will keep its promise. Ultimately though, the quality of your systems will be assessed by the users.
Monitor Critical Workflows Imagine testing your critical processes and workflows by simulating a real-world user, sending execution times, warnings and error messages (including screenshots of the system under test) to the monitoring system of your choice.</description>
    </item>
    
    <item>
      <title>Pre-Configured Headless Container</title>
      <link>/enterprise/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/container/</guid>
      <description>Sakuli Container in a Nutshell Our pre-configured Docker container will run Sakuli in an isolated environment. This will ensure having the same setup and equal conditions for every test-run. You don´t need an unlocked display for native UI interaction with the headless VNC image configured in every container. For debugging purposes, you will be able to watch your test execution live in a browser or a VNC client any time.</description>
    </item>
    
    <item>
      <title>RPA - Robot Process Automation</title>
      <link>/rpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/rpa/</guid>
      <description>Over the years systems and processes are growing, eventually heading for potential technology and media breakdowns. In such scenarios, automation of processes and daily tasks may become quite difficult. Sakuli can help to automate tasks between various system boundaries. Downloading a report from a browser-based reporting tool app and upload it to shared folder won’t create problems anymore: Sakuli closes the gap between browser automation and desktop automation.
Have Sakuli do the Work Add import or export functionalities to your application when APIs are missing or too expensive to implement.</description>
    </item>
    
    <item>
      <title>Sakuli CLI Tools</title>
      <link>/enterprise/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/cli/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sakuli Core</title>
      <link>/enterprise/core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/core/</guid>
      <description>All You Need UI Test Automation Sakuli combines web testing with testing on native applications. That’s all you need in order to perfectly simulate a real-world user. Design your tests, have them run automatically and save a ton of time by dramatically reducing your manual testing.
Build Sustainable Tests Sakuli uses state of the art web-testing technologies like Selenium, wraps a lot of standard functionality and use-cases into user-friendly packages, thereby solving most of the pain points encountered by test designers in the past.</description>
    </item>
    
    <item>
      <title>Sakuli Hub</title>
      <link>/enterprise/hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/hub/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/testing/</guid>
      <description>Sakuli makes it easy to write tests that act like real-world users. It automatically sets up and starts a webdriver instance and also lets you take control over the systems’s mouse and keyboard. The example below shows a basic login to an imaginary webbased service with login form: (async () =&amp;gt; { const testCase = new TestCase(); try { await _navigateTo(&amp;#34;example.com&amp;#34;); await _setValue(_input(&amp;#39;user&amp;#39;), &amp;#39;me&amp;#39;); await _setValue(_password_(&amp;#39;password&amp;#39;), &amp;#39;top-$ecret&amp;#39;); await _click(_button(&amp;#39;Login&amp;#39;)); testCase.</description>
    </item>
    
  </channel>
</rss>