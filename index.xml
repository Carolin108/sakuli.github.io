<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sakuli E2E and Monitoring</title>
    <link>/</link>
    <description>Recent content on Sakuli E2E and Monitoring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automation</title>
      <link>/automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/automation/</guid>
      <description>Over the years systems and processes are growing which leads to potential technology- and media breaks. In such scenarios the automation of processes and daily tasks can get very hard. Sakuli can help to automate tasks between various system boundaries. Download a report from a browser based reporting tool app and upload it to shared folder? No problem. Sakuli closes the gap between browser automation and desktop automation.
Automate. Everything.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/</guid>
      <description>Initialisation This guide will get you started with writing Sakuli tests from scratch. To follow the tutorial, you should create a new npm project in an empty folder.
For this guide, we will assume that our working directory is /tmp/sakuli_starter on a *nix system, or %Temp%\sakuli_starter on a Windows machine, respectively.
To create a new, empty project, first run:
npm init This interactive prompt will ask you for some metadata regarding your project.</description>
    </item>
    
    <item>
      <title>Legal Notice</title>
      <link>/legalnotice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legalnotice/</guid>
      <description>Address ConSol Consulting &amp;amp; Solutions Software GmbH
St.-Cajetan-Straße 43
D-81669 Munich
Telefon: +49-89-45841-100
Telefax: +49-89-45841-111
E-Mail: info@consol.de
Commercial register Registration court: Munich District Court
HRB 97371
Sales tax identification number (in accordance with § 27 a of the Sales Tax Law) DE 129318612
Authorized company officers Dr. Ulrich Schwanengel
Michael Beutner – Technology
Andrea Stellwag – Finances
Bernd Wiserner – Resources
Responsible for content (in accordance with § 6 MDStV) Nico Zellner</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/monitoring/</guid>
      <description>Beside the correct behaviour of your system you might also be interested in the actual performance of user interactions with the system. Identifying possible performance bottlenecks - before your users will - is a critical task for operators and administrators. Sakuli makes it possible to integrate such a real world performance analysis in an automated way. For this reason Sakuli provides a generic forwarder interface which gets the latest results of a testrun.</description>
    </item>
    
    <item>
      <title>Monitoring Forwarder</title>
      <link>/enterprise/forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/forwarder/</guid>
      <description>End-2-End Application Testing and Monitoring – a Perfect Combination Combining End-2-End Tests with Monitoring solutions proves to be optimal. Because effective quality assurance looks over and beyond any given server: Automated end-2-end tests ensure that your web or rich client ecosystem keeps its promise. Ultimately though, the users will judge the quality of your systems.
Monitor critical Workflows Imagine testing your critical processes and workflows by simulating a real user and sending the execution times, warnings and error messages (including screenshots of the system under test) to the monitoring system of your choice.</description>
    </item>
    
    <item>
      <title>Pre-Configured Headless Container</title>
      <link>/enterprise/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/container/</guid>
      <description>Sakuli Container in a nutshell Our pre-configured Docker container will run Sakuli in an isolated environment which ensures having the same setup and equal conditions for every test-run. You don´t need an unlocked display for native UI interaction with the headless VNC image which is configured in every container. You can watch your test execution live in a browser or a VNC client any time for debugging purposes. Scale your tests horizontally by instanciating as many container as you need.</description>
    </item>
    
    <item>
      <title>Sakuli CLI Tools</title>
      <link>/enterprise/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/cli/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sakuli Core</title>
      <link>/enterprise/core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/core/</guid>
      <description>UI testautomation with every application Sakuli combines web testing with testing on native applications. That&amp;rsquo;s all you need to perfectly simulate a real world user. Design your tests, let them run automatically and save a ton of time by reducing your manual tests dramatically.
Build sustainable tests Sakuli uses state of the art web-testing technologies like Selenium, wraps a lot of standard functionality and use-cases into user-friendly packages and therefore solves most of the pain points test designers encountered in the past.</description>
    </item>
    
    <item>
      <title>Sakuli Hub</title>
      <link>/enterprise/hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/hub/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/testing/</guid>
      <description>Sakuli makes it easy to write tests that act like a real user. It automatically sets up and starts a webdriver instance and also lets you take control over the mouse and keyboard of the system. The example below is showing a basic login to an imaginary webbased service with login form: (async () =&amp;gt; { const testCase = new TestCase(); try { await _navigateTo(&amp;#34;example.com&amp;#34;); await _setValue(_input(&amp;#39;user&amp;#39;), &amp;#39;me&amp;#39;); await _setValue(_password_(&amp;#39;password&amp;#39;), &amp;#39;top-$ecret&amp;#39;); await _click(_button(&amp;#39;Login&amp;#39;)); testCase.</description>
    </item>
    
  </channel>
</rss>