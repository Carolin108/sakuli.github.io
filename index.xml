<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sakuli E2E and Monitoring</title>
    <link>/</link>
    <description>Recent content on Sakuli E2E and Monitoring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automation</title>
      <link>/automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/automation/</guid>
      <description>Over the years systems and processes are growing which leads to potential technology- and media breaks. In such scenarios the automation of processes and daily tasks can get very hard. Sakuli can help to automate tasks between various system boundaries. Download a report from a browser based reporting tool app and upload it to shared folder? No problem. Sakuli closes the gap between browser automation and desktop automation.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/</guid>
      <description>Installation Running
npm i @sakuli/cli or
yarn add @sakuli/cli will install Sakuli and its required dependencies.
One of Sakulis core components, nut.js requires OpenCV. As of now the installation process assumes you do not have an existing OpenCV installation and will try to build it from source via opencv4nodejs.
Building OpenCV from scratch requires a cmake installation.
In case you already have an OpenCV installation (version 3.x.x required, e.g. via brew install opencv@3 or else), you can disable the build process via environment variable:</description>
    </item>
    
    <item>
      <title>Legal Notice</title>
      <link>/legalnotice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/legalnotice/</guid>
      <description>Address ConSol Consulting &amp;amp; Solutions Software GmbH
St.-Cajetan-Straße 43
D-81669 Munich
Telefon: +49-89-45841-100
Telefax: +49-89-45841-111
E-Mail: info@consol.de
Commercial register Registration court: Munich District Court
HRB 97371
Sales tax identification number (in accordance with § 27 a of the Sales Tax Law) DE 129318612
Authorized company officers Dr. Ulrich Schwanengel
Michael Beutner – Technology
Andrea Stellwag – Finances
Bernd Wiserner – Resources
Responsible for content (in accordance with § 6 MDStV) Nico Zellner</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/monitoring/</guid>
      <description>Beside the correct behaviour of your system you might also be interested in the actual performance of user interactions with the system. Identifying possible performance bottlenecks before your users will is a critical task for operators and administrators. Sakuli makes it possible to integrate the such a real world performance analysis in an automated way. For this reason Sakuli provides a generic forwarder interface which gets the latest results of a testrun.</description>
    </item>
    
    <item>
      <title>Monitoring Forwarder</title>
      <link>/enterprise/forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/forwarder/</guid>
      <description>End-2-End Testing &amp;amp; End-2-End Monitoring – a Perfect Combination Combining End-2-End Testing with End-2-End Monitoring proves to be optimal. Because effective quality assurance looks over and beyond any given server: Automated end-2-end tests ensure that your web or rich client application keeps its promise. Ultimately though, the users will judge the quality of your systems.
Test and monitor critical Workflows Imagine testing your critical processes and workflows (like the checkout process of your webshop that affects your conversion rate) by simulating a real user and sending the execution times, warnings and error messages to the monitoring system of your choice.</description>
    </item>
    
    <item>
      <title>Pre-Configured Headless Container</title>
      <link>/enterprise/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/container/</guid>
      <description>Summary Our pre-configured Docker container will run Sakuli in an isolated environment which ensures having the same setup and equal conditions for every test-run. You don´t need an unlocked display for native UI interaction with the headless VNC image configured in every container. You can watch your test execution live in a browser or a VNC client any time for debugging purposes.
Benefits:  Always rely on the same environment: no cookie hassle, no active user sessions, no artefacts of old tests Scale your tests: run multiple instances of your container in parallel to accelerate overall execution time or simulate heavy load on your application CI/CD: Easily integrate your tests into your continuous integration environment The layout and scaling of websites and native applications will always be the same and therefore increases the liability of native interactions Orchestrate, execute and alter your Test Container within the Sakuli UI portal  Architecture of Sakuli containers Each Sakuli docker image is installed with the following components:</description>
    </item>
    
    <item>
      <title>Sakuli CLI Tools</title>
      <link>/enterprise/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/cli/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sakuli Core</title>
      <link>/enterprise/core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/core/</guid>
      <description>UI testautomation with every application Sakuli combines web-driven testing with testing on native applications. That&amp;rsquo;s all you need to perfectly simulate a real world user. Design your tests, let them run automatically and save a ton of time by reducing your manual tests dramatically.
Build sustainable tests Sakuli uses state of the art web-testing technologies like Selenium, wraps a lot of standard functionality and use-cases into user-friendly packages and therefore solves most of the pain points test designers encountered in the past.</description>
    </item>
    
    <item>
      <title>Sakuli Hub</title>
      <link>/enterprise/hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/enterprise/hub/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/testing/</guid>
      <description>Sakuli makes it easy to write tests that act like a real user. It automatically sets up and starts a webdriver instance and also let you take control over the mouse and keyboard of the system.
(async () =&amp;gt; { const testCase = new TestCase(); try { await _navigateTo(&amp;#34;example.com&amp;#34;); await _setValue(_input(&amp;#39;user&amp;#39;), &amp;#39;me&amp;#39;); await _setValue(_password_(&amp;#39;password&amp;#39;), &amp;#39;top-$ecret&amp;#39;); await _click(_button(&amp;#39;Login&amp;#39;)); testCase.endOfStep(&amp;#39;Login&amp;#39;); } catch (e) { tc.handleException(e); } finally { tc.saveResult(); } }).then(done); Testing Features Sakuli is build to create real end to end testing experiences for testers, developers and companies.</description>
    </item>
    
  </channel>
</rss>